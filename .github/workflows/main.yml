# Имя вашего рабочего процесса
name: CI/CD Pipeline

# Триггер: рабочий процесс запускается при каждом push в ветку 'main'
on:
  push:
    branches:
      - main

# Задачи, которые будут выполнены
jobs:
  test_and_lint:
    # Рабочий процесс будет выполняться на последней версии Ubuntu
    runs-on: ubuntu-latest

    # Шаги, которые будут выполнены в рамках этой задачи
    steps:
      # Шаг 1: Клонирование вашего репозитория
      - name: Checkout repository
        uses: actions/checkout@v4

      # Шаг 2: Установка Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Шаг 3: Сборка и запуск контейнеров с помощью Docker Compose
      - name: Build and run containers
        run: docker-compose up -d --build

      # Шаг 4: Ожидание готовности базы данных PostgreSQL
      - name: Wait for database to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          max_retries=10
          retry_count=0
          while [ $retry_count -lt $max_retries ]; do
            # Используем флаг -T для неинтерактивного режима
            if docker-compose exec -T db pg_isready -U user -h localhost; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "PostgreSQL not ready yet, retrying in 5 seconds..."
            sleep 5
            retry_count=$((retry_count + 1))
          done
          if [ $retry_count -eq $max_retries ]; then
            echo "Failed to connect to PostgreSQL after $max_retries attempts."
            exit 1
          fi

      # Шаг 5: Проверка кода с помощью ruff
      - name: Run Ruff checks
        # Используем флаг -T
        run: docker-compose exec -T app ruff check .

      # Шаг 6: Выполнение миграций базы данных
      - name: Apply migrations
        # Используем флаг -T
        run: docker-compose exec -T app python manage.py migrate

      # Шаг 7: Запуск тестов Django
      - name: Run Django tests
        # Используем флаг -T
        run: docker-compose exec -T app python manage.py test

      # Шаг 8: Остановка контейнеров после завершения
      - name: Stop containers
        if: always()
        run: docker-compose down